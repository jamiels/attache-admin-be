#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("attache-admin-be:serverHttps");
const http = require("http");
const https = require("https");
const fs = require("fs");
/**
 * Get port from environment and store in Express.
 */
const options = {
  key: fs.readFileSync("key.pem"),
  cert: fs.readFileSync("cert.pem"),
};
const port = normalizePort(process.env.PORT || "9000");
app.set("port", port);

/**
 * Create HTTP serverHttps.
 */

console.log("start https");
const serverHttps = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

serverHttps.listen(port);
serverHttps.on("error", onError);
serverHttps.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP serverHttps "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case "EACCES":
    console.error(`${bind} requires elevated privileges`);
    process.exit(1);
    break;
  case "EADDRINUSE":
    console.error(`${bind} is already in use`);
    process.exit(1);
    break;
  default:
    throw error;
  }
}

/**
 * Event listener for HTTP serverHttps "listening" event.
 */

function onListening() {
  const addr = serverHttps.address();
  const bind = typeof addr === "string" ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}
